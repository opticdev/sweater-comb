// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`failing case 1: adding a camelCase when pascalCase is required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 2`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "header": "exampleParam",
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "headers",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/headers/exampleParam",
          "kind": "response-header",
        },
        "value": Object {
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for response-header: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 3`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "examplePropertyName",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "examplePropertyName",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/examplePropertyName",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "examplePropertyName",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "examplePropertyName is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for field: request body 'examplePropertyName'",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 4`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "examplePropertyName",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "examplePropertyName",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/examplePropertyName",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "examplePropertyName",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "examplePropertyName is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for field: response body 'examplePropertyName'",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 5`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
        "value": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a required property 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "email",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "email",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "email",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/email",
          "kind": "field",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected request body property to not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added field: email",
    },
  ],
}
`;

exports[`failing case 1: adding required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "exampleParam",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected added query parameter to not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing from optional to required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "exampleParam",
            "required": true,
          },
          "before": Object {
            "in": "query",
            "name": "exampleParam",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not allow changing from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected query parameter to be not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing optional to required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected body property to be optional",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing required to optional 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from required to optional",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected body property to be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing type 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "exampleParam",
            "schema": Object {
              "type": "number",
            },
          },
          "before": Object {
            "in": "query",
            "name": "exampleParam",
            "schema": Object {
              "type": "string",
            },
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not change the type",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected query parameter to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing type 2`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "number",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not allow changing types",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected property to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing type 3`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "number",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not allow changing types",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected property to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: removing operation 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "removed": Object {
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected operation to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed operation: GET /example",
    },
  ],
}
`;

exports[`failing case 1: removing property 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
        "removed": Object {
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected response property to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed field: name",
    },
  ],
}
`;

exports[`failing case 1: removing status code 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
          ],
          "jsonPath": "/paths/~1example/get/responses/200",
          "kind": "response",
        },
        "removed": Object {
          "before": Object {
            "description": "",
            "statusCode": "200",
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected response to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed response: 200",
    },
  ],
}
`;

exports[`failing case 2: adding a camelCase when Capital-Param-Case is required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have Capital-Param-Case name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not Capital-Param-Case",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 2`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "header": "exampleParam",
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "headers",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/headers/exampleParam",
          "kind": "response-header",
        },
        "value": Object {
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for response-header: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 3`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "camelCase",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "camelCase",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/camelCase",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "camelCase",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for field: request body 'camelCase'",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 4`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "camelCase",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "camelCase",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/camelCase",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "camelCase",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for field: response body 'camelCase'",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 5`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
        "value": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for query-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding an optional property 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "email",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "email",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "email",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/email",
          "kind": "field",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added field: email",
    },
  ],
}
`;

exports[`passing case 1: adding optional 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added query-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: changing optional to required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from required to optional",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`passing case 1: changing required to optional 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`passing case 2: wrong case ok if it is already there 1`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 2`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 3`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 4`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 5`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 3: adding a Capital-Param-Case when Capital-Param-Case is required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "Example-Header",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "Example-Header",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "Example-Header",
          "required": false,
        },
      },
      "condition": "have Capital-Param-Case name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for header-parameter: Example-Header",
    },
  ],
}
`;

exports[`passing case 4: wrong case ok if it is already there 1`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;
